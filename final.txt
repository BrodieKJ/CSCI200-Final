Title: Brodie Kimbell-jack, Section B, Maze generator

Problem Proposal: My program will prompt the user with a ui where they can create a maze. They will be able to change the size of 
the maze, where the start and finish is,  and choose where walls will go. Once the user clicks generate the program will fill in 
the rest of the empty space with a maze, the program will verify the maze is solvable with the correct start and finish. The program 
will highlight the fastest path through the maze. The mazze will gnerate 3 mazes across 3 layers. Each layers start position will be basaed on the previous layers
end position, except for the last layer.

Class Description: The class I created was the Maze class. It handles the generation of each maze object and determining the solvability
of each maze. The Maze object and its functionality is critical fo the program working. 

List Data Structure: I used an Array. I needed my lists to be fast and easily accessable, and use of memory was not a major issue for me.

File I/O: I use file input and output to save and load files.

Project Modification: I implemented all the functionality I set out to, except for the naming of saves and loading of mazes via saved names.
I felt that it was unecessary and would have cluttered the UI, and added unnecessary complexity.

Reflection: From this project I gained a much better understanding of how DFS maze generating algorthms work, and how BFS search
algorithms work. One of the biggest changes I made was to allow the window to be resized, this required a lot of calculation to figure
out how to resize the maze, and draw the new grid. This was challenging to get working correctly adn took some time. I think I would
try to start with a abetter outline of my project. I just kept adding functionality to the project which caused issues with previous
functionality that I would then have to change. I think starting with a better outline of the project would help avoid rewriting 
and help the code work better with itself.